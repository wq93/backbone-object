var collapsers;
var style = 'body {white-space: normal !important;}#json>.collapser{display:none}ul {list-style-type: none;padding: 0px;margin: 0px 0px 0px 26px;}li {position: relative;}.hoverable {transition: background-color .2s ease-out 0s;-webkit-transition: background-color .2s ease-out 0s;display: inline-block;}.hovered {transition-delay: .2s;-webkit-transition-delay: .2s;}.selected {outline-style: solid;outline-width: 1px;outline-style: dotted;}.collapsed>.collapsible {display: none;}.ellipsis {display: none;}.collapsed>.ellipsis {display: inherit;}.collapser {position: absolute;top: 1px;left: -1.5em;cursor: default;user-select: none;-webkit-user-select: none;}.status {position: fixed;left: 0px;bottom: 0px;min-width: 628px;border-color: #c2c2c2;border-top-width: 1px;border-right-width: 1px;border-bottom-width: 0px;border-left-width: 0px;border-style: solid;border-top-right-radius: 4px;height: 16px;padding-top: 2px;padding-bottom: 2px;padding-right: 7px;padding-left: 4px;font-family: sans-serif;font-size: 12px; opacity: 0;background-color: #d2d2f6;color: #696969;transition: opacity .2s ease-out; -webkit-transition: opacity .2s ease-out;user-select: none;-webkit-user-select: none;}.status:not(:empty ) {opacity: 1;}.toolbox {font-family: sans-serif;font-size: 13px;opacity: .25;background-color: #d2d2f6;position: fixed;right: 0px;top: 0px;border-color: #c2c2c2;border-bottom-width: 1px;border-left-width: 1px;border-top-width: 0px;border-right-width: 0px;border-style: solid;border-bottom-left-radius: 4px;padding-bottom: 3px;transition: opacity .2s ease-out;-webkit-transition: opacity .2s ease-out;cursor: default;user-select: none;-webkit-user-select: none;padding-left: 2px;}.toolbox:hover {opacity: 1;}.toolbox>* {padding-left: 3px;padding-right: 3px;}.toolbox>a {padding-left: 5px;}.toolbox>img {height: 14px;vertical-align: bottom;cursor: pointer;}';
var theme = 'body {white-space: pre;}.property {font-weight: bold;}.type-null {color: gray;}.type-boolean {color: firebrick;}.type-number {color: blue;}.type-string {color: green;}.callback-function {color: gray;}.collapser:after {content: "-";}.collapsed > .collapser:after {content: "+";}.ellipsis:after {content: " â€¦ ";}.collapsible {margin-left: 2em;}.hoverable {padding-top: 1px;padding-bottom: 1px;padding-left: 2px;padding-right: 2px;border-radius: 2px;}.hovered {background-color: rgba(235, 238, 249, 1);}.collapser {padding-right: 6px;padding-left: 6px;}';
var ids   = "";

function load(id) {
    ids = id;
    var child, data;
    if (document.getElementById(id)) {
        data = extractData(document.getElementById(id).innerText);
        if (data)processData(data);
    }
}
function extractData(rawText) {
    var tokens, text = rawText.trim();

    function test(text) {
        return ((text.charAt(0) == "[" && text.charAt(text.length - 1) == "]") || (text.charAt(0) == "{" && text.charAt(text.length - 1) == "}"));
    }

    if (test(text))return {text: rawText, offset: 0};
    tokens = text.match(/^([^\s\(]*)\s*\(([\s\S]*)\)\s*;?$/);
    if (tokens && tokens[1] && tokens[2]) {
        if (test(tokens[2].trim()))return {fnName: tokens[1], text: tokens[2], offset: rawText.indexOf(tokens[2])};
    }
}
function processData(data) {
    function formatToHTML(fnName, offset) {
        if (!jsonText)return;
        var object;
        try {
            object = JSON.parse(jsonText);
        } catch (e) {
            return;
        }
        jsonToHTML(object, fnName);
    }

    if (window == top) {
        if (data) {
            jsonText = data.text;
            formatToHTML(data.fnName, data.offset);
        }
    }
}
function jsonToHTML(json, fnName) {
    var output = '';
    if (fnName)output += '<div class="callback-function">' + fnName + '(<div>';
    output += '<div id="json">';
    output += valueToHTML(json);
    output += '</div>';
    if (fnName) {
        output += '<div class="callback-function">)</div>';
    }
    displayUI(output);
}
function valueToHTML(value) {
    var valueType = typeof value, output = "";
    if (value == null)output += decorateWithSpan("null", "type-null"); else if (value && value.constructor == Array)output += arrayToHTML(value); else if (valueType == "object")output += objectToHTML(value); else if (valueType == "number")output += decorateWithSpan(value, "type-number"); else if (valueType == "string")if (/^(http|https):\/\/[^\s]+$/.test(value))output += decorateWithSpan('"', "type-string") + '<a href="' + value + '">' + htmlEncode(value) + '</a>' + decorateWithSpan('"', "type-string"); else output += decorateWithSpan('"' + value + '"', "type-string"); else if (valueType == "boolean")output += decorateWithSpan(value, "type-boolean");
    return output;
}
function arrayToHTML(json) {
    var i, length, output = '<div class="collapser"></div>[<span class="ellipsis"></span><ul class="array collapsible">', hasContents = false;
    for (i = 0, length = json.length; i < length; i++) {
        hasContents = true;
        output += '<li><div class="hoverable">';
        output += valueToHTML(json[i]);
        if (i < length - 1)output += ',';
        output += '</div></li>';
    }
    output += '</ul>]';
    if (!hasContents)output = "[ ]";
    return output;
}
function objectToHTML(json) {
    var i, key, length, keys = Object.keys(json), output = '<div class="collapser"></div>{<span class="ellipsis"></span><ul class="obj collapsible">', hasContents = false;
    for (i = 0, length = keys.length; i < length; i++) {
        key         = keys[i];
        hasContents = true;
        output += '<li><div class="hoverable">';
        output += '<span class="property">' + htmlEncode(key) + '</span>: ';
        output += valueToHTML(json[key]);
        if (i < length - 1)output += ',';
        output += '</div></li>';
    }
    output += '</ul>}';
    if (!hasContents)output = "{ }";
    return output;
}
function htmlEncode(t) {
    return t != null ? t.toString().replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;") : '';
}
function decorateWithSpan(value, className) {
    return '<span class="' + className + '">' + htmlEncode(value) + '</span>';
}
function displayUI(html) {
    var content                            = "";
    content += "<style>" + style + "</style>";
    content += "<style>" + theme + "</style>";
    content += html;
    document.getElementById(ids).innerHTML = content;
    collapsers                             = document.querySelectorAll("#json .collapsible .collapsible");
    document.body.addEventListener('click', ontoggle, false);
    document.body.addEventListener('mouseover', onmouseMove, false);
}
function ontoggle(event) {
    var collapsed, target = event.target;
    if (event.target.className == 'collapser') {
        collapsed = target.parentNode.getElementsByClassName('collapsible')[0];
        if (collapsed.parentNode.classList.contains("collapsed"))collapsed.parentNode.classList.remove("collapsed"); else collapsed.parentNode.classList.add("collapsed");
    }
}
function getParentLI(element) {
    if (!element) {
        return;
    }
    if (element.tagName != "LI")while (element && element.tagName != "LI")element = element.parentNode;
    if (element && element.tagName == "LI")return element;
}
var onmouseMove = (function () {
    var hoveredLI;

    function onmouseOut() {
        if (hoveredLI) {
            if(hoveredLI.firstChild.classList){
                hoveredLI.firstChild.classList.remove("hovered");
                hoveredLI = null;
            }

        }
    }

    return function (event) {
        var str = "";
        element = getParentLI(event.target);
        if (element) {
            if (hoveredLI){
                if(hoveredLI.firstChild.classList){
                    hoveredLI.firstChild.classList.remove("hovered");
                    hoveredLI = element;
                    element.firstChild.classList.add("hovered");
                }
            }
            do {
                if (element.parentNode.classList.contains("array")) {
                    var index = [].indexOf.call(element.parentNode.children, element);
                    str       = "[" + index + "]" + str;
                }
                if (element.parentNode.classList.contains("obj")) {
                    str = "." + element.firstChild.firstChild.innerText + str;
                }
                element = element.parentNode.parentNode.parentNode;
            } while (element.tagName == "LI");
            if (str.charAt(0) == '.')str = str.substring(1);
            return;
        }
        onmouseOut();
    };
})();